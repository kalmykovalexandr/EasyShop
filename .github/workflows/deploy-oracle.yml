name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  IMAGE_VERSION: ${{ github.sha }}
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Run tests
        run: |
          mvn -B -f backend/common-security/pom.xml deploy
          mvn -B -f backend/auth-service/pom.xml test
          mvn -B -f backend/product-service/pom.xml test
          mvn -B -f backend/purchase-service/pom.xml test
          mvn -B -f backend/api-gateway/pom.xml test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/auth-service
            ${{ env.DOCKER_REGISTRY }}/product-service
            ${{ env.DOCKER_REGISTRY }}/purchase-service
            ${{ env.DOCKER_REGISTRY }}/api-gateway
            ${{ env.DOCKER_REGISTRY }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/auth-service/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/auth-service:${{ env.IMAGE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push product-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/product-service/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/product-service:${{ env.IMAGE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push purchase-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/purchase-service/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/purchase-service:${{ env.IMAGE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push api-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/api-gateway/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/api-gateway:${{ env.IMAGE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/frontend:${{ env.IMAGE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: ${{ secrets.ORACLE_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd ${{ secrets.ORACLE_APP_PATH || '/opt/easyshop' }}
            
            # Create .env file with production variables
            cat > .env << EOF
            IMAGE_VERSION=${{ env.IMAGE_VERSION }}
            DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_TTL_MINUTES=${{ secrets.JWT_TTL_MINUTES || 60 }}
            EOF
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker compose -f infra/docker-compose.prod.yml pull
            
            # Stop existing containers
            docker compose -f infra/docker-compose.prod.yml down
            
            # Start new containers
            docker compose -f infra/docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -f
            
            # Show running containers
            docker compose -f infra/docker-compose.prod.yml ps
